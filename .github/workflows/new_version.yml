name: Build new version

on:
  push:
    tags:
    - v*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Get version
      id: get_version
      run: echo "::set-output name=version::$((Select-Xml -Path .\Jellyfin.Plugin.AmvOrg.csproj -XPath "/Project/PropertyGroup/AssemblyVersion").Node.InnerXML)"
      shell: pwsh
    - name: jprm-build
      uses: oddstr13/jellyfin-plugin-repository-manager@v0.4.2
    - name: test
      run: pwd && ls && ls artifacts
    - name: Upload zip artifact
      uses: actions/upload-artifact@v2
      with:
        name: amvorg_${{ steps.get_version.outputs.version }}
        path: artifacts/amvorg_${{ steps.get_version.outputs.version }}.zip
  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: echo "::set-output name=version::$((Select-Xml -Path .\Jellyfin.Plugin.AmvOrg.csproj -XPath "/Project/PropertyGroup/AssemblyVersion").Node.InnerXML)"
        shell: pwsh
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v3.0.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Download build
        id: download_artifacts
        uses: actions/download-artifact@v2
        with:
          name: amvorg_${{ steps.get_version.outputs.version }}
          path: release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Jellyfin.Plugin.AmvOrg Release v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ## Release
            Jellyfin.Plugin.AmvOrg v${{ steps.get_version.outputs.version }}
            Changelog:
            ${{ steps.changelog.outputs.changelog }}
      - name: Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/amvorg_${{ steps.get_version.outputs.version }}.zip
          asset_name: Jellyfin.Plugin.AmvOrg_${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
